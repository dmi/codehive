from logger import record
from emojis import get_emoji

class Entity:
    def __init__(self, name, x, y, type="robot", hp=100, strength=10, icon="ü§ñ", state="idle", idle=250, map=None):
        self.name = name
        self.x = x
        self.y = y
        self.dx = 0  # –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ x
        self.dy = 0  # –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ y
        self.type = type
        self.hp = hp
        self.strength = strength
        self.inventory = []
        self.icon = icon  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —ç–º–æ–¥–∑–∏
        self.state = state
        self.idle = idle  # –≤—Ä–µ–º—è –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        self.cooldown = idle  # –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        self.map = map  # –¢–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.vx = 0  # —Å–º–µ—â–µ–Ω–∏–µ –ø–æ x
        self.vy = 0  # —Å–º–µ—â–µ–Ω–∏–µ –ø–æ y
        self.emoji = get_emoji(icon, (self.map.TILE_SIZE, self.map.TILE_SIZE))

    def update(self, dt, visible=True):
        self.cooldown -= dt
        if self.cooldown <= 0:
            self.cooldown = self.idle  # –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            self.act(dt)

        if visible:
            # –ü–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            if self.state == "moving":
                # –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–≤ –ø–∏–∫—Å–µ–ª—è—Ö –∑–∞ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—É)
                speed = self.map.TILE_SIZE / self.idle
                # –°–º–µ—â–µ–Ω–∏–µ –∑–∞ —ç—Ç–æ—Ç –∫–∞–¥—Ä
                move_x = speed * dt * self.dx
                move_y = speed * dt * self.dy
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è
                self.vx += move_x
                self.vy += move_y
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã —Ü–µ–ª–µ–≤–æ–π –∫–ª–µ—Ç–∫–∏
                if abs(self.vx) >= self.map.TILE_SIZE or abs(self.vy) >= self.map.TILE_SIZE:
                    # –°–±—Ä–æ—Å —Å–º–µ—â–µ–Ω–∏—è
                    self.vx = 0
                    self.vy = 0

    def act(self, dt):
        pass

    def move(self, dx, dy):
        self.dx = dx
        self.dy = dy
        self.vx = -dx * self.map.TILE_SIZE
        self.vy = -dy * self.map.TILE_SIZE
        new_x = self.x + dx
        new_y = self.y + dy
        if self.map.is_walkable(new_x, new_y):
            self.x, self.y = new_x, new_y
            self.state = "moving"
            return True
        self.state = "idle"
        return False

    def attack(self, target):
        target.hp -= self.strength
        self.state = "attacking"
        record(f"{self.name} –∞—Ç–∞–∫–æ–≤–∞–ª {target.name}, –æ—Å—Ç–∞–ª–æ—Å—å {target.hp} HP", self.name)

    def pick_up(self):
        itms = self.map.look_up(self)
        self.inventory.extend(self.map.pick_up(self, itms))
        self.state = "picking_up"
        record(f"{self.name} –ø–æ–¥–æ–±—Ä–∞–ª {[i.name for i in itms]}", self.name)

    def dig(self, dx, dy):
        self.dx = dx
        self.dy = dy
        if self.map.is_bound(self.x + dx, self.y + dy) and not self.map.is_walkable(self.x + dx, self.y + dy):
            material, hardness = self.map.dig(self)
            record(f"{self.name} –∫–æ–ø–∞–µ—Ç {material}, –æ—Å—Ç–∞–ª–æ—Å—å {hardness} –ø–æ–ø—ã—Ç–æ–∫", self.name)
            self.state = "digging"
        else:
            record(f"{self.name} –∫–æ–ø–∞–µ—Ç –≤–Ω–∏–∫—É–¥–∞", self.name)
            self.state = "idle"